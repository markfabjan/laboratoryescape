/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package laboratoryescape;

/**
 *
 * @author Mark Fabjan
 */
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.Timer;

public class Game extends JPanel implements KeyListener, Runnable {

    Thread t;
    int frame = 0;
    Timer timer;
    String frames = "";
    int height = 300;
    int width = 500;
    int INTERFACE = 0;
    int STAGE = 4;
    int seconds = 0;
    int mousex = 0;
    int mousey = 0;
    String playerLives = "";
    String playerStage = "";
    int hp[][] = new int[100][4];
    int sg[][] = new int[100][12];
    int rb[][] = new int[100][12];
    int wpa[][] = new int[200][6];
    int peq[] = new int[3];
    boolean shooting = false;
    int selectedWeapon = 0;
    int playerShot[] = new int[6];
    boolean showMap = false;
    int tilesizex = width / 20;
    int tilesizey = height / 15;
    //player
    ImageIcon fr = new ImageIcon(this.getClass().getResource("PlayerSprites/facing_right.png"));
    ImageIcon fl = new ImageIcon(this.getClass().getResource("PlayerSprites/facing_left.png"));
    ImageIcon mr = new ImageIcon(this.getClass().getResource("PlayerSprites/moving_right.png"));
    ImageIcon mr1 = new ImageIcon(this.getClass().getResource("PlayerSprites/moving_right_1.png"));
    ImageIcon ml = new ImageIcon(this.getClass().getResource("PlayerSprites/moving_left.png"));
    ImageIcon ml1 = new ImageIcon(this.getClass().getResource("PlayerSprites/moving_left_1.png"));
    //guard
    ImageIcon gr = new ImageIcon(this.getClass().getResource("GuardSprites/moving_right.png"));
    ImageIcon gr1 = new ImageIcon(this.getClass().getResource("GuardSprites/moving_right_1.png"));
    ImageIcon gl = new ImageIcon(this.getClass().getResource("GuardSprites/moving_left.png"));
    ImageIcon gl1 = new ImageIcon(this.getClass().getResource("GuardSprites/moving_left_1.png"));
    //robot
    ImageIcon r1 = new ImageIcon(this.getClass().getResource("RobotSprites/moving_right.png"));
    ImageIcon r = new ImageIcon(this.getClass().getResource("RobotSprites/moving_left.png"));
    //healthPacks
    ImageIcon hp1 = new ImageIcon(this.getClass().getResource("EquipmentSprites/hp.png"));
    //keys
    ImageIcon keyCard = new ImageIcon(this.getClass().getResource("EquipmentSprites/key_card.png"));
    //help
    ImageIcon imageHelp = new ImageIcon(this.getClass().getResource("MapSprites/help.png"));
    //equipment
    ImageIcon gun = new ImageIcon(this.getClass().getResource("EquipmentSprites/gun.png"));
    ImageIcon shotgun = new ImageIcon(this.getClass().getResource("EquipmentSprites/shotgun.png"));
    ImageIcon rpg = new ImageIcon(this.getClass().getResource("EquipmentSprites/RPG.png"));
    //environment
    ImageIcon empty = new ImageIcon(this.getClass().getResource("MapSprites/emptySpace.png"));
    ImageIcon tile001 = new ImageIcon(this.getClass().getResource("MapSprites/tile001.png"));
    ImageIcon lava = new ImageIcon(this.getClass().getResource("MapSprites/lava.png"));
    ImageIcon acid = new ImageIcon(this.getClass().getResource("MapSprites/acid.png"));
    ImageIcon levelUp = new ImageIcon(this.getClass().getResource("MapSprites/level_up.png"));
    ImageIcon levelDown = new ImageIcon(this.getClass().getResource("MapSprites/level_down.png"));
    
    ImageIcon bed = new ImageIcon(this.getClass().getResource("MapSprites/bed.png"));
    ImageIcon generator = new ImageIcon(this.getClass().getResource("MapSprites/generator.png"));
    ImageIcon door = new ImageIcon(this.getClass().getResource("MapSprites/blast_door.png"));
    Image player = null;
    Image guard = null;
    Image robot = null;
    Image equipment = null;
    Image environment = null;
    Image imageBed = bed.getImage();
    Image imageGenerator = generator.getImage();
    Image imageDoor = door.getImage();
    Image help = imageHelp.getImage();
    int playerx = 30;
    int playery = height / 2;
    boolean facingRight = true;
    int playerSpeed = 0;
    int runningFrame = 0;
    boolean playerJump = false;
    int jumpCounter = 0;
    int jumpStep = 0;
    int playerSpeedY = 0;
    int LIVES = -1;
    int score = 0;
    int keys = 0;
    int ks[][]=new int [8][4];
    int room000[][] = new int[][]{
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};
    int room001[][] = new int[][]{
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1},
        {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1},
        {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1},
        {1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1},
        {9, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 8},
        {9, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 8},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};
    int room002[][] = new int[][]{
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0, 0, 0, 0, 1},
        {9, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0, 0, 0, 0, 8},
        {9, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 8},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};
    int room003[][] = new int[][]{
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1},
        {1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1},
        {1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1},
        {1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1},
        {1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1},
        {9, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 8},
        {9, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 8},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};
    int room004[][] = new int[][]{
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1},
        {1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1},
        {1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1},
        {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1},
        {9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8},
        {9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};
    int room005[][] = new int[][]{
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1},
        {1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1},
        {1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1},
        {1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};
    int room006[][] = new int[][]{
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1},
        {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 8},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 8},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};
    int room007[][] = new int[][]{
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {9, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8},
        {9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8},
        {1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};
    int room008[][] = new int[][]{
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8},
        {9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};
    int room009[][] = new int[][]{
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
        {1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 1, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 3, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};
    int room010[][] = new int[][]{
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1},
        {1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1},
        {9, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1},
        {9, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};
    int room011[][] = new int[][]{
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};
    int room012[][] = new int[][]{
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {9, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8},
        {9, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};
    int room013[][] = new int[][]{
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8},
        {1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1},
        {9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};
    int room014[][] = new int[][]{
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1},
        {1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1},
        {1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1},
        {9, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8},
        {9, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};
    int room015[][] = new int[][]{
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};
    int room016[][] = new int[][]{
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};
    /*
     * int levelTemplate [][] = new int[][] {
     * {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
     * {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     * {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     * {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     * {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     * {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     * {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     * {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     * {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     * {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     * {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     * {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     * {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
     * {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
     * {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};
     */
    //empty space   0
    //wall          1
    //lava          2
    //acid          3
    //
    //
    //
    //exit          8
    //entrance      9

    @Override
    public void run() {
        try {
            while (true) {
                repaint();
                Thread.sleep(25);
            }
        } catch (Exception e) {
        }
    }

    public Game() {
        newGame();


        t = new Thread(this);
        this.addKeyListener(this);
        this.setFocusable(true);
        t.start();
        //this.addKeyListener(this);//{
        //@Override
        //public void keyPressed(KeyEvent e) {

        // }
        setBackground(Color.white);
        setDoubleBuffered(true);
        this.requestFocus();
    }
    int[][] map = new int[20][15];

    public void fillMap() {
        switch (STAGE) {
            case 0:
                for (int i = 0; i <= 19; i++) {
                    for (int j = 0; j <= 14; j++) {
                        map[i][j] = room000[j][i];
                    }
                }
                break;
            case 1:
                for (int i = 0; i <= 19; i++) {
                    for (int j = 0; j <= 14; j++) {
                        map[i][j] = room001[j][i];
                    }
                }
                break;
            case 2:
                for (int i = 0; i <= 19; i++) {
                    for (int j = 0; j <= 14; j++) {
                        map[i][j] = room002[j][i];
                    }
                }
                break;
            case 3:
                for (int i = 0; i <= 19; i++) {
                    for (int j = 0; j <= 14; j++) {
                        map[i][j] = room003[j][i];
                    }
                }
                break;
            case 4:
                for (int i = 0; i <= 19; i++) {
                    for (int j = 0; j <= 14; j++) {
                        map[i][j] = room004[j][i];
                    }
                }
                break;
            case 5:
                for (int i = 0; i <= 19; i++) {
                    for (int j = 0; j <= 14; j++) {
                        map[i][j] = room005[j][i];
                    }
                }
                break;
            case 6:
                for (int i = 0; i <= 19; i++) {
                    for (int j = 0; j <= 14; j++) {
                        map[i][j] = room006[j][i];
                    }
                }
                break;
            case 7:
                for (int i = 0; i <= 19; i++) {
                    for (int j = 0; j <= 14; j++) {
                        map[i][j] = room007[j][i];
                    }
                }
                break;
            case 8:
                for (int i = 0; i <= 19; i++) {
                    for (int j = 0; j <= 14; j++) {
                        map[i][j] = room008[j][i];
                    }
                }
                break;
            case 9:
                for (int i = 0; i <= 19; i++) {
                    for (int j = 0; j <= 14; j++) {
                        map[i][j] = room009[j][i];
                    }
                }
                break;
            case 10:
                for (int i = 0; i <= 19; i++) {
                    for (int j = 0; j <= 14; j++) {
                        map[i][j] = room010[j][i];
                    }
                }
                break;
            case 11:
                for (int i = 0; i <= 19; i++) {
                    for (int j = 0; j <= 14; j++) {
                        map[i][j] = room011[j][i];
                    }
                }
                break;
            case 12:
                for (int i = 0; i <= 19; i++) {
                    for (int j = 0; j <= 14; j++) {
                        map[i][j] = room012[j][i];
                    }
                }
                break;
            case 13:
                for (int i = 0; i <= 19; i++) {
                    for (int j = 0; j <= 14; j++) {
                        map[i][j] = room013[j][i];
                    }
                }
                break;
            case 14:
                for (int i = 0; i <= 19; i++) {
                    for (int j = 0; j <= 14; j++) {
                        map[i][j] = room014[j][i];
                    }
                }
                break;
            case 15:
                for (int i = 0; i <= 19; i++) {
                    for (int j = 0; j <= 14; j++) {
                        if(keys<8&&keys!=8){
                            map[i][j] = room016[j][i];
                        }else{
                            map[i][j] = room015[j][i];
                        }
                    }
                }
                break;
        }
    }

    public void playerRespawn() {
        switch (STAGE) {
            case 0:
                playerx = 30;
                playery = 200;
                break;
            case 1:
                playerx = 30;
                playery = 200;
                break;
            case 2:
                playerx = 25;
                playery = 240;
                break;
            case 3:
                playerx = 30;
                playery = 200;
                break;
            case 4:
                playerx = 30;
                playery = 200;
                break;
            case 5:
                playerx = 30;
                playery = 10;
                break;
            case 6:
                playerx = 50;
                playery = 120;
                break;
            case 7:
                playerx = 40;
                playery = 220;
                break;
            case 8:
                playerx = 30;
                playery = 10;
                break;
            case 9:
                playerx = 25;
                playery = 180;
                break;
            case 10:
                playerx = 30;
                playery = 220;
                break;
            case 11:
                playerx = 30;
                playery = 10;
                break;
            case 12:
                playerx = 30;
                playery = 30;
                break;
            case 13:
                playerx = 125;
                playery = 140;
                break;
            case 14:
                playerx = 30;
                playery = 30;
                break;
            case 15:
                playerx = 30;
                playery = 60;
                break;
        }
    }

    public void checkPlayerSurroundings() {
        //System.out.println(frame + "  " + playerSpeedY);
        for (int i = 0; i <= 19; i++) {
            for (int j = 0; j <= 14; j++) {
                switch (map[i][j]) {
                    //down lava
                    case 2:
                        if (map[i][j] == 2
                                && playerx + 12 >= (i * 25)
                                && playerx + 12 <= ((i * 25) + 25)
                                && playery + 40 >= j * 20) {
                            LIVES--;
                            playerRespawn();
                        }
                        break;
                    //down acid
                    case 3:
                        if (map[i][j] == 3
                                && playerx + 12 >= (i * 25)
                                && playerx + 12 <= ((i * 25) + 25)
                                && playery + 40 >= j * 20) {
                            LIVES--;
                            playerRespawn();
                        }
                        break;
                }
                switch (map[i][j]) {
                    case 1:
                        //up tile001
                        if (playerx + 5 >= i * 25
                                && playerx + 5 <= (i * 25) + 25
                                && playery + 5 <= ((j * 20) + 20)
                                && playery + 5 >= (j * 20)
                                && playerSpeedY < 0
                                || playerx + 12 >= i * 25
                                && playerx + 12 <= (i * 25) + 25
                                && playery + 5 <= ((j * 20) + 20)
                                && playery + 5 >= (j * 20)
                                && playerSpeedY < 0
                                || playerx + 20 >= i * 25
                                && playerx + 20 <= (i * 25) + 25
                                && playery + 5 <= ((j * 20) + 20)
                                && playery + 5 >= (j * 20)
                                && playerSpeedY < 0) {
                            playerJump = false;
                            jumpStep = 0;
                            playerSpeedY = 10;
                            keyUp = false;
                            //System.out.println("Up Tile001");
                        }
                        //down tile001

                        if (playerx + 5 + playerSpeed >= i * 25
                                && playerx + 5 <= (i * 25) + 25
                                && playery + 45 <= ((j * 20) + 20)
                                && playery + 45 >= (j * 20)
                                || playerx + 12 >= i * 25
                                && playerx + 12 <= (i * 25) + 25
                                && playery + 45 <= ((j * 20) + 20)
                                && playery + 45 >= (j * 20)
                                || playerx + 20 >= i * 25
                                && playerx + 20 <= (i * 25) + 25
                                && playery + 45 <= ((j * 20) + 20)
                                && playery + 45 >= (j * 20)) {
                            /*
                             * if (playerSpeedY > 0) { playerSpeedY = 0;
                             * playerJump = false; jumpStep = 0;
                             */
                            if (playerSpeedY > 0) {
                                if (playerx + 12 >= i * 25
                                        && playerx + 12 <= (i * 25) + 25
                                        && playery + 45 >= j * 20
                                        && playery + 45 <= (j * 20) + 20) {
                                    playerJump = false;
                                    jumpStep = 0;
                                    //System.out.println("playerJump=false");
                                }
                                //playerJump = false;
                                playerSpeedY = 0;
                                keyUp = false;
                            }
                            //System.out.println("Down Tile001");
                            //}
                        }
                }
                switch (map[i][j]) {
                    case 1:
                        if ( //left tile001
                                playerx <= (i * 25) + 25
                                && playerx >= i * 25
                                && playery + 10 >= j * 20
                                && playery + 10 <= (j * 20) + 20
                                || playerx <= (i * 25) + 25
                                && playerx >= i * 25
                                && playery + 30 >= j * 20
                                && playery + 30 <= (j * 20) + 20) {
                            if (playerSpeed < 0) {
                                playerSpeed = 0;
                                //System.out.println("left Tile001");
                            }
                        }
                        //right tile001
                        if (playerx + 25 <= (i * 25) + 25
                                && playerx + 25 >= i * 25
                                && playery + 10 >= j * 20
                                && playery + 10 <= (j * 20) + 20
                                || playerx + 25 <= (i * 25) + 25
                                && playerx + 25 >= i * 25
                                && playery + 30 >= j * 20
                                && playery + 30 <= (j * 20) + 20) {
                            if (playerSpeed > 0) {
                                playerSpeed = 0;
                                //System.out.println("right Tile001");
                            }
                        }
                        //System.out.println("Down Tile001");
                        break;
                    case 0:
                        //down empty
                        if (playerx + 5 >= i * 25
                                && playerx + 5 <= (i * 25) + 25
                                && playery + 45 <= ((j * 20) + 20)
                                && playery + 45 >= (j * 20)
                                && playerx + 12 >= i * 25
                                && playerx + 12 <= (i * 25) + 25
                                && playery + 45 <= ((j * 20) + 20)
                                && playery + 45 >= (j * 20)
                                && playerx + 20 >= i * 25
                                && playerx + 20 <= (i * 25) + 25
                                && playery + 45 <= ((j * 20) + 20)
                                && playery + 45 >= (j * 20)) {
                            if (playerSpeedY == 0) {
                                playerSpeedY = 10;
                                jumpStep = 0;
                                //System.out.println("Down empty");
                            }

                        }

                        break;
                }
            }
        }
        //right levelUp
        if (map[((playerx + 25) / 25)][((playery + 10) / 20)] == 8 || map[((playerx + 25) / 25)][((playery + 30) / 20)] == 8) {
            if (playerSpeed > 0) {
                playerSpeed = 0;
                changeLevel();
                if (map[((playerx + 12) / 25)][((playery + 40) / 20)] == 0) {
                    if (playerSpeedY == 0) {
                        playerSpeedY = 10;
                        jumpStep = 0;
                    }
                }
            }
        } //left levelUp
        else if (map[((playerx - 5) / 25)][((playery + 10) / 20)] == 9 || map[((playerx - 5) / 25)][((playery + 30) / 20)] == 9) {
            if (playerSpeed < 0) {
                playerSpeed = 0;
                changeLevel();
                if (map[((playerx + 12) / 25)][((playery + 40) / 20)] == 0) {
                    if (playerSpeedY == 0) {
                        playerSpeedY = 10;
                        jumpStep = 0;
                    }
                }
            }
        }
        //idealize/normalize
        if (playerSpeedY == 0) {
            playery = ((playery + 5) / 20) * (height / 15);
        }
    }

    public void checkPlayerBulletSurroundings() {
        for (int i = 0; i <= 19; i++) {
            for (int j = 0; j <= 14; j++) {
                switch (map[i][j]) {
                    case 1:
                        if ( //left tile001
                                playerShot[3] <= (i * 25) + 25
                                && playerShot[3] >= i * 25
                                && playerShot[4] >= j * 20
                                && playerShot[4] <= (j * 20) + 20) {
                            if (playerShot[0] == 1) {
                                playerShot[0] = 0;
                            }
                        }
                        //right tile001
                        if (playerShot[3] <= (i * 25) + 25
                                && playerShot[3] >= i * 25
                                && playerShot[4] >= j * 20
                                && playerShot[4] <= (j * 20) + 20) {
                            if (playerShot[0] == 1) {
                                playerShot[0] = 0;
                            }
                        }
                        //System.out.println("Down Tile001");
                        break;
                }
            }
        }
    }

    public void checkSecurityGuardBulletSurroundings() {
        for (int h = 0; h <= sg.length - 1 - 1; h++) {
            for (int i = 0; i <= 19; i++) {
                for (int j = 0; j <= 14; j++) {
                    switch (map[i][j]) {
                        case 1:
                            if ( //left tile001
                                    sg[h][10] <= (i * 25) + 25
                                    && sg[h][10] >= i * 25
                                    && sg[h][11] >= j * 20
                                    && sg[h][11] <= (j * 20) + 20) {
                                if (sg[h][8] == 1) {
                                    sg[h][8] = 0;
                                    sg[h][10] = -10;
                                    sg[h][11] = -10;
                                }
                            }
                            //right tile001
                            if (sg[h][10] <= (i * 25) + 25
                                    && sg[h][10] >= i * 25
                                    && sg[h][11] >= j * 20
                                    && sg[h][11] <= (j * 20) + 20) {
                                if (sg[h][8] == 1) {
                                    sg[h][8] = 0;
                                    sg[h][10] = -10;
                                    sg[h][11] = -10;
                                }
                            }
                            //System.out.println("Down Tile001");
                            break;
                    }
                }
            }
        }
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }
    boolean keyUp = false;
    boolean keyLeft = false;
    boolean keyRight = false;
    boolean firstPlace = false;
    boolean secondPlace = false;
    boolean thirdPlace = false;
    boolean showHelp=false;

    @Override
    public void keyPressed(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_M:
                showMap = true;
        }
        switch (e.getKeyCode()) {
            case KeyEvent.VK_H:
                showHelp = true;
        }
        switch (e.getKeyCode()) {
            case KeyEvent.VK_N:
                thirdPlace = true;
        }
        switch (e.getKeyCode()) {
            case KeyEvent.VK_B:
                secondPlace = true;
        }
        switch (e.getKeyCode()) {
            case KeyEvent.VK_V:
                firstPlace = true;
        }
        switch (e.getKeyCode()) {
            case KeyEvent.VK_UP:
                //keyPressedUp();
                keyUp = true;
        }
        switch (e.getKeyCode()) {
            case KeyEvent.VK_LEFT:
                //keyPressedLeft();
                keyLeft = true;
                facingRight = false;
        }
        switch (e.getKeyCode()) {
            case KeyEvent.VK_RIGHT:
                //keyPressedRight();
                keyRight = true;
                facingRight = true;
        }
        switch (e.getKeyCode()) {
            case KeyEvent.VK_SPACE:
                //keyPressedRight();
                shooting = true;
                //System.out.println("PressedSpace");
                if (LIVES == 0) {
                    newGame();
                } else if (LIVES == (-1)) {
                    LIVES = 3;
                } else if (LIVES == (-2)) {
                    newGame();
                }
        }
    }

    public void newGame() {
        
        //s0
        
        ks[0][0]=1;
        ks[0][1]=0;//stage
        ks[0][2]=300;
        ks[0][3]=260;
        
        //s2
        
        hp[0][0] = 1;
        hp[0][1] = 2;
        hp[0][2] = 225;
        hp[0][3] = 120;
        
        ks[1][0]=1;
        ks[1][1]=2;//stage
        ks[1][2]=80;
        ks[1][3]=80;
        
        //s3
        
        ks[2][0]=1;
        ks[2][1]=3;//stage
        ks[2][2]=200;
        ks[2][3]=140;
        
        //s4
        
        ks[3][0]=1;
        ks[3][1]=4;//stage
        ks[3][2]=25;
        ks[3][3]=60;
        
        //s5
        
        hp[1][0] = 1;
        hp[1][1] = 5;
        hp[1][2] = 375;
        hp[1][3] = 180;
        
        //s6
        
        wpa[0][0] = 1;//true
        wpa[0][1] = 6;//stage
        wpa[0][2] = 100;//x
        wpa[0][3] = 180;//y
        wpa[0][4] = 0;//class
        wpa[0][5] = 3;//amount
        
        sg[4][0] = 1;//exists
        sg[4][1] = 6;//stage
        sg[4][2] = 2;//health
        sg[4][3] = 250;//x
        sg[4][4] = 240;//y
        sg[4][5] = 0;
        sg[4][6] = 25;//min
        sg[4][7] = 250;//max
        
        ks[4][0]=1;
        ks[4][1]=6;//stage
        ks[4][2]=30;
        ks[4][3]=210;
        
        //s7
        
        hp[2][0] = 1;//true
        hp[2][1] = 7;//stage
        hp[2][2] = 425;//x
        hp[2][3] = 240;//y
        
        ks[5][0]=1;
        ks[5][1]=7;//stage
        ks[5][2]=100;
        ks[5][3]=40;
        
        //s8
        
        hp[3][0] = 1;//true
        hp[3][1] = 8;//stage
        hp[3][2] = 350;//x
        hp[3][3] = 260;//y
        
        wpa[1][0] = 1;//true
        wpa[1][1] = 8;//stage
        wpa[1][2] = 400;//x
        wpa[1][3] = 260;//y
        wpa[1][4] = 1;//class
        wpa[1][5] = 2;//amount
        
        //s9

        sg[0][0] = 1;//exists
        sg[0][1] = 9;//stage
        sg[0][2] = 2;//health
        sg[0][3] = 100;//x
        sg[0][4] = 240;//y
        sg[0][5] = 0;
        sg[0][6] = 25;//min
        sg[0][7] = 100;//max
        
        ks[6][0]=1;
        ks[6][1]=9;//stage
        ks[6][2]=225;
        ks[6][3]=160;
        
        //s10
        
        sg[1][0] = 1;//exists
        sg[1][1] = 10;//stage
        sg[1][2] = 2;//health
        sg[1][3] = 225;//x
        sg[1][4] = 220;//y
        sg[1][5] = 0;
        sg[1][6] = 175;//min
        sg[1][7] = 225;//max
        
        sg[2][0] = 1;//exists
        sg[2][1] = 10;//stage
        sg[2][2] = 2;//health
        sg[2][3] = 300;//x
        sg[2][4] = 220;//y
        sg[2][5] = 0;
        sg[2][6] = 250;//min
        sg[2][7] = 300;//max
        
        hp[4][0] = 1;//true
        hp[4][1] = 10;//stage
        hp[4][2] = 375;//x
        hp[4][3] = 220;//y
        
        wpa[2][0] = 1;//true
        wpa[2][1] = 10;//stage
        wpa[2][2] = 400;//x
        wpa[2][3] = 240;//y
        wpa[2][4] = 2;//class
        wpa[2][5] = 1;//amount
        
        ks[7][0]=1;
        ks[7][1]=10;//stage
        ks[7][2]=350;
        ks[7][3]=20;
        
        //s11
        
        rb[0][0] = 1;//exists
        rb[0][1] = 11;//stage
        rb[0][2] = 4;//health
        rb[0][3] = 125;//x
        rb[0][4] = 180;//y
        rb[0][5] = 0;
        rb[0][6] = 25;//min
        rb[0][7] = 125;//max
        
        rb[1][0] = 1;//exists
        rb[1][1] = 11;//stage
        rb[1][2] = 4;//health
        rb[1][3] = 400;//x
        rb[1][4] = 240;//y
        rb[1][5] = 0;
        rb[1][6] = 25;//min
        rb[1][7] = 400;//max
        
        //s12
        
        hp[4][0] = 1;//true
        hp[4][1] = 12;//stage
        hp[4][2] = 250;//x
        hp[4][3] = 140;//y
        
        wpa[3][0] = 1;//true
        wpa[3][1] = 12;//stage
        wpa[3][2] = 350;//x
        wpa[3][3] = 260;//y
        wpa[3][4] = 2;//class
        wpa[3][5] = 1;//amount
        
        wpa[4][0] = 1;//true
        wpa[4][1] = 12;//stage
        wpa[4][2] = 375;//x
        wpa[4][3] = 260;//y
        wpa[4][4] = 1;//class
        wpa[4][5] = 1;//amount
        
        wpa[5][0] = 1;//true
        wpa[5][1] = 12;//stage
        wpa[5][2] = 400;//x
        wpa[5][3] = 260;//y
        wpa[5][4] = 0;//class
        wpa[5][5] = 3;//amount
        
        //s13
        
        sg[3][0] = 1;//exists
        sg[3][1] = 13;//stage
        sg[3][2] = 2;//health
        sg[3][3] = 350;//x
        sg[3][4] = 240;//y
        sg[3][5] = 0;
        sg[3][6] = 130;//min
        sg[3][7] = 350;//max
        
        hp[5][0] = 1;//true
        hp[5][1] = 13;//stage
        hp[5][2] = 350;//x
        hp[5][3] = 160;//y
        
        rb[2][0] = 1;//exists
        rb[2][1] = 13;//stage
        rb[2][2] = 4;//health
        rb[2][3] = 300;//x
        rb[2][4] = 80;//y
        rb[2][5] = 0;
        rb[2][6] = 250;//min
        rb[2][7] = 300;//max
        
        rb[3][0] = 1;//exists
        rb[3][1] = 13;//stage
        rb[3][2] = 4;//health
        rb[3][3] = 175;//x
        rb[3][4] = 80;//y
        rb[3][5] = 0;
        rb[3][6] = 25;//min
        rb[3][7] = 175;//max
        
        
        peq[0] = 0;
        peq[1] = 0;
        peq[2] = 0;

        

        playerx = 30;
        playery = height / 2;
        facingRight = true;
        playerSpeed = 0;
        runningFrame = 0;
        playerJump = false;
        jumpCounter = 0;
        jumpStep = 0;
        playerSpeedY = 0;
        LIVES = -1;

        frame = 0;
        String frames = "";
        height = 300;
        width = 500;
        INTERFACE = 0;
        STAGE = 0;
        seconds = 0;
        mousex = 0;
        mousey = 0;

        shooting = false;
        selectedWeapon = 0;
        showMap = false;
        score = 0;
        keys = 0;
    }

    @Override
    public void keyReleased(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_M:
                showMap = false;
        }
        switch (e.getKeyCode()) {
            case KeyEvent.VK_H:
                showHelp = false;
        }
        switch (e.getKeyCode()) {
            case KeyEvent.VK_N:
                thirdPlace = false;
        }
        switch (e.getKeyCode()) {
            case KeyEvent.VK_B:
                secondPlace = false;
        }
        switch (e.getKeyCode()) {
            case KeyEvent.VK_V:
                firstPlace = false;
        }
        switch (e.getKeyCode()) {
            case KeyEvent.VK_LEFT:
                //playerSpeed = 0;
                //facingRight = false;
                keyLeft = false;
                break;
        }
        switch (e.getKeyCode()) {
            case KeyEvent.VK_RIGHT:
                keyRight = false;
                //playerSpeed = 0;
                //facingRight = true;
                break;
        }
        switch (e.getKeyCode()) {
            case KeyEvent.VK_SPACE:
                shooting = false;
            //playerSpeed = 0;
            //facingRight = true;
            //break;
        }
    }

    public void drawplayer() {
        if (playerSpeed == 0) {
            if (facingRight == true) {
                player = fr.getImage();
            } else if (facingRight == false) {
                player = fl.getImage();
            }
        }
        if (playerSpeed > 0) {
            if (runningFrame == 0) {
                player = mr.getImage();
            } else if (runningFrame == 1) {
                player = mr1.getImage();
            }
        }
        if (playerSpeed < 0) {
            if (runningFrame == 0) {
                player = ml.getImage();
            } else if (runningFrame == 1) {
                player = ml1.getImage();
            }
        }
    }

    public void changeLevel() {
        switch (STAGE) {
            case 0:
                if (playerx > 400) {
                    STAGE = 1;
                }
                playerx = 30;
                break;
            case 1:
                if (playerx < 100) {
                    STAGE = 0;
                    playerx = 470;

                } else if (playerx > 400) {
                    STAGE = 2;
                    playerx = 30;
                }
                break;
            case 2:
                if (playerx < 100) {
                    STAGE = 1;
                    playerx = 470;

                } else if (playerx > 400) {
                    STAGE = 3;
                    playerx = 30;
                }
                break;
            case 3:
                if (playerx < 100) {
                    STAGE = 2;
                    playerx = 470;

                } else if (playerx > 400) {
                    STAGE = 4;
                    playerx = 30;
                }
                break;
            case 4:
                if (playerx < 100) {
                    STAGE = 3;
                    playerx = 470;

                } else if (playerx > 400) {
                    STAGE = 5;
                    playerx = 30;
                    playery = 10;
                }
                break;
            case 5:
                if (playerx < 100) {
                    STAGE = 4;
                    playerx = 470;
                    playery = 240;

                } else if (playerx > 400) {
                    STAGE = 6;
                    playerx = 30;
                    playery = 120;
                }
                break;
            case 6:
                if (playerx < 100) {
                    STAGE = 5;
                    playerx = 470;
                    playery = 140;

                } else if (playerx > 400) {
                    STAGE = 7;
                    playerx = 20;
                    playery = 200;
                }
                break;
            case 7:
                if (playerx < 100) {
                    STAGE = 6;
                    playerx = 470;

                } else if (playerx > 400) {
                    STAGE = 8;
                    playerx = 30;
                }
                break;
            case 8:
                if (playerx < 100) {
                    STAGE = 7;
                    playerx = 470;
                    playerx = 220;

                } else if (playerx > 400) {
                    STAGE = 9;
                    playerx = 30;
                    playery = 160;
                }
                break;
            case 9:
                if (playerx < 100) {
                    STAGE = 8;
                    playerx = 470;
                    playery = 180;

                } else if (playerx > 400) {
                    STAGE = 10;
                    playerx = 30;
                    playery = 200;
                }
                break;
            case 10:
                if (playerx < 100) {
                    STAGE = 9;
                    playerx = 470;
                    playery = 10;

                } else if (playerx > 400) {
                    STAGE = 11;
                    playerx = 30;
                }
                break;
            case 11:
                if (playerx < 100) {
                    STAGE = 10;
                    playerx = 470;

                } else if (playerx > 400) {
                    STAGE = 12;
                    playerx = 30;
                }
                break;
            case 12:
                if (playerx < 100) {
                    STAGE = 11;
                    playerx = 470;

                } else if (playerx > 400 && playery > 150) {
                    STAGE = 13;
                    playerx = 30;
                } else if (playerx > 400 && playery < 150) {
                    STAGE = 14;
                    playerx = 30;
                }
                break;
            case 13:
                if (playerx > 400) {
                    STAGE = 15;
                    playerx = 30;
                }
                break;
            case 14:
                if (playerx > 400) {
                    STAGE = 15;
                    playerx = 30;
                }
                break;
        }
    }

    @Override
    public void paint(final Graphics g) {
        if (LIVES > 0 && LIVES != 0) {
            //super.paint(g);


            //FRAMES
            //FRAMES
            frame++;
            if (frame == 40) {
                seconds++;
                frame = 0;
            }
            if (frame % 6 == 0) {
                if (runningFrame == 0) {
                    runningFrame = 1;
                } else {
                    runningFrame = 0;
                }
            }
            frames = "" + frame;
            fillMap();
            if (keyUp == true) {
                if (playerJump == false && playerSpeedY == 0) {
                    playerJump = true;
                }
            }
            if (keyLeft == true) {
                playerSpeed = -4;
                facingRight = false;
            } else if (keyRight == true) {
                playerSpeed = 4;
                facingRight = true;
            } else {
                playerSpeed = 0;
            }
            boolean keyUp = false;
            boolean keyLeft = false;
            boolean keyRight = false;
            checkPlayerSurroundings();
            if (playerJump == true) {
                switch (jumpStep) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        playerSpeedY = -10;
                        jumpStep++;
                        break;
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                        playerSpeedY = -5;
                        jumpStep++;
                        break;
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                        playerSpeedY = -1;
                        jumpStep++;
                        break;
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                        playerSpeedY = 1;
                        jumpStep++;
                        break;
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                        playerSpeedY = 5;
                        jumpStep++;
                        break;
                    case 20:
                    case 21:
                    case 22:
                        playerSpeedY = 10;
                        jumpStep++;
                        break;
                    case 23://end:
                        playerSpeedY = 10;
                        jumpStep = 0;
                        playerJump = false;
                        break;
                }
            }
            playerx += playerSpeed;
            playery += playerSpeedY;
            drawplayer();
            if (seconds % 100 == 0) {
                g.setColor(Color.black);
                g.clearRect(0, 0, width, height);
            }
            /*
             * for (int i = 0; i <= 99; i++) { if (healthPacks[i][0] == 1) { if
             * (playerx <= healthPacks[i][2] + 25 && playerx + 25 >=
             * healthPacks[i][2] && playery <= healthPacks[i][3] + 20 && playery
             * + 40 <= healthPacks[i][3]) { healthPacks[i][0]=0; LIVES++; } }
             * g.fillRect(healthPacks[i][2], healthPacks[i][3], 25, 20); }
             */
            Graphics2D g2d = (Graphics2D) g;
            for (int i = 0; i < 20; i++) {
                for (int j = 0; j < 15; j++) {
                    if (map[i][j] == 0) {
                        environment = empty.getImage();
                        g2d.drawImage(environment, tilesizex * i, tilesizey * j, this);
                    } else if (map[i][j] == 1) {
                        environment = tile001.getImage();
                        g2d.drawImage(environment, tilesizex * i, tilesizey * j, this);
                    } else if (map[i][j] == 2) {
                        environment = lava.getImage();
                        g2d.drawImage(environment, tilesizex * i, tilesizey * j, this);
                    } else if (map[i][j] == 3) {
                        environment = acid.getImage();
                        g2d.drawImage(environment, tilesizex * i, tilesizey * j, this);
                    }///.../////////////////////////////////
                    else if (map[i][j] == 8) {
                        environment = levelUp.getImage();
                        g2d.drawImage(environment, tilesizex * i, tilesizey * j, this);
                    } else if (map[i][j] == 9) {
                        environment = levelDown.getImage();
                        g2d.drawImage(environment, tilesizex * i, tilesizey * j, this);
                    }/*
                     * switch (STAGE) { case 0: g.setColor(Color.black);
                     * g.fillRect(25, 20, 200, 20); g.setColor(Color.white);
                     * g.drawString("ROOM000 : Escape the laboratory", 30,
                     * 33);//31 letters break; case 1: g.setColor(Color.black);
                     * g.fillRect(25, 20, 200, 20); g.setColor(Color.white);
                     * g.drawString("ROOM001 : Measure your distance", 30,
                     * 33);//31 letters break; case 2: g.setColor(Color.black);
                     * g.fillRect(25, 20, 230, 20); g.setColor(Color.white);
                     * g.drawString("ROOM002 : Carefully plan your jumps", 30,
                     * 33);//35 letters break; case 3: g.setColor(Color.black);
                     * g.fillRect(25, 20, 230, 20); g.setColor(Color.white);
                     * g.drawString("ROOM003 : Mind the lava and acid gaps", 30,
                     * 33);//35 letters break; }
                     */


                }

            }
            /*
             * addMouseListener(new MouseAdapter() { public void
             * mousePressed(MouseEvent me){ mousex=me.getX(); mousey=me.getY();
             * shootWeapon(g); } });
             */
            for (int i = 0; i <= 99 - 1; i++) {
                if (hp[i][0] == 1) {
                    if (hp[i][1] == STAGE) {
                        equipment=hp1.getImage();
                        g2d.drawImage(equipment, hp[i][2], hp[i][3], this);
                        if (hp[i][2]+10 > playerx
                                && hp[i][2] +15  < playerx + 25
                                && hp[i][3] + 5 >= playery
                                && hp[i][3] + 10 <= playery + 40) {
                            if (LIVES < 3) {
                                LIVES++;
                                hp[i][0] = 0;
                            }
                        }
                    }
                }
            }
            
            for (int i = 0; i <= 7 ; i++) {
                if (ks[i][0] == 1) {
                    if (ks[i][1] == STAGE) {
                        equipment=keyCard.getImage();
                        g2d.drawImage(equipment, ks[i][2], ks[i][3], this);
                        if (ks[i][2]+10 > playerx
                                && ks[i][2] +15  < playerx + 25
                                && ks[i][3] + 5 >= playery
                                && ks[i][3] + 10 <= playery + 40) {
                            keys++;
                            ks[i][0] = 0;
                        }
                    }
                }
            }

            //security guards
            for (int i = 0; i <= sg.length - 1 - 1; i++) {
                if (sg[i][0] == 1) {
                    if (sg[i][1] == STAGE) {
                        if (sg[i][5] == 1) {
                            if (runningFrame == 0) {
                                guard = gr.getImage();
                            } else if (runningFrame == 1) {
                                guard = gr1.getImage();
                            }
                        }
                        else if (sg[i][5] == 0) {
                            if (runningFrame == 0) {
                                guard = gl.getImage();
                            } else if (runningFrame == 1) {
                                guard = gl1.getImage();
                            }
                        }
                        g2d.drawImage(guard, sg[i][3], sg[i][4], this);
                        //movement
                        if (sg[i][5] == 0) {
                            if (sg[i][3] > sg[i][6]) {
                                sg[i][3] -= 2;
                            } else {
                                sg[i][5] = 1;
                            }
                        }
                        if (sg[i][5] == 1) {
                            if (sg[i][3] + 25 < sg[i][7]) {
                                sg[i][3] += 2;
                            } else {
                                sg[i][5] = 0;
                            }
                        }
                        //damage(touch)
                        if (playerx + 5 > sg[i][3]
                                && playerx + 20 < sg[i][3] + 25
                                && playery + 10 > sg[i][4]
                                && playery + 30 < sg[i][4] + 40) {
                            LIVES--;
                            playerRespawn();
                        }
                        //damage(gunshot)
                        if (sg[i][5] == 0) {
                            if (playery + 10 > sg[i][4]
                                    && playery + 30 < sg[i][4] + 40
                                    && playerx < sg[i][3]) {
                                if (sg[i][8] == 0) {
                                    sg[i][8] = 1;
                                    sg[i][9] = 0;
                                    sg[i][10] = sg[i][3] + 12;
                                    sg[i][11] = sg[i][4] + 20;
                                }
                            }
                        }
                        if (sg[i][5] == 1) {
                            if (playery + 10 > sg[i][4]
                                    && playery + 30 < sg[i][4] + 40
                                    && playerx > sg[i][3]) {
                                if (sg[i][8] == 0) {
                                    sg[i][8] = 1;
                                    sg[i][9] = 1;
                                    sg[i][10] = sg[i][3] + 12;
                                    sg[i][11] = sg[i][4] + 20;
                                }
                            }
                        }
                        //shot by player
                        if (sg[i][3] < playerShot[3]
                                && sg[i][3] + 25 > playerShot[3]
                                && sg[i][4] < playerShot[4]
                                && sg[i][4] + 40 > playerShot[4]
                                && playerShot[0] == 1
                                && playerShot[1] == STAGE) {
                            
                            switch(playerShot[5]){
                                case 0:
                                    sg[i][2]--;
                                    break;
                                case 1:
                                    sg[i][2]-=2;
                                    break;
                                case 2:
                                    sg[i][2]-=3;
                                    
                            }
                            if (sg[i][2] <= 0) {
                                sg[i][0] = 0;
                                score+=500;
                            }
                            playerShot[0] = 0;
                            
                        }
                        
                    }
                }
            }

            //security guard's bullets

            for (int i = 0; i <= 99 - 1; i++) {
                if (sg[i][1] == STAGE) {
                    g.setColor(Color.black);
                    g.fillRect(sg[i][10] - 10, sg[i][11] - 1, 20, 2);
                    checkSecurityGuardBulletSurroundings();
                }
                if (sg[i][8] == 1) {
                    if (sg[i][9] == 0) {
                        sg[i][10] -= 5;
                    }
                    if (sg[i][9] == 1) {
                        sg[i][10] += 5;
                    }
                }
                if (sg[i][10] < 0 || sg[i][10] > 500) {
                    sg[i][8] = 0;
                    sg[i][10] = -10;
                    sg[i][11] = -10;
                }
                if (sg[i][10] > playerx
                        && sg[i][10] < playerx + 25
                        && playery + 10 > sg[i][4]
                        && playery + 30 < sg[i][4] + 40) {
                    LIVES--;
                    playerRespawn();
                    sg[i][8] = 0;
                    sg[i][10] = -10;
                    sg[i][11] = -10;
                }
            }

            //Robots
            for (int i = 0; i <= rb.length - 1 - 1; i++) {
                if (rb[i][0] == 1) {
                    if (rb[i][1] == STAGE) {
                        if (rb[i][5] == 1) {
                            robot = r1.getImage();
                        }
                        if (rb[i][5] == 0) {
                            robot = r.getImage();
                        }
                        g2d.drawImage(robot, rb[i][3], rb[i][4], this);
                        //movement
                        if (rb[i][5] == 0) {
                            if (rb[i][3] > rb[i][6]) {
                                rb[i][3] -= 2;
                            } else {
                                rb[i][5] = 1;
                            }
                        }
                        if (rb[i][5] == 1) {
                            if (rb[i][3] + 50 < rb[i][7]) {
                                rb[i][3] += 2;
                            } else {
                                rb[i][5] = 0;
                            }
                        }
                        //damage(touch)
                        if (playerx + 5 > rb[i][3]
                                && playerx + 20 < rb[i][3] + 50
                                && playery + 10 > rb[i][4]
                                && playery + 30 < rb[i][4] + 40) {
                            LIVES--;
                            playerRespawn();
                        }
                        //damage(gunshot)
                        if (rb[i][5] == 0) {
                            if (playery + 10 > rb[i][4]
                                    && playery + 30 < rb[i][4] + 40
                                    && playerx < rb[i][3]) {
                                if (rb[i][8] == 0) {
                                    rb[i][8] = 1;
                                    rb[i][9] = 0;
                                    rb[i][10] = rb[i][3] + 25;
                                    rb[i][11] = rb[i][4] + 20;
                                }
                            }
                        }
                        if (rb[i][5] == 1) {
                            if (playery + 10 > rb[i][4]
                                    && playery + 30 < rb[i][4] + 40
                                    && playerx > rb[i][3]) {
                                if (rb[i][8] == 0) {
                                    rb[i][8] = 1;
                                    rb[i][9] = 1;
                                    rb[i][10] = rb[i][3] + 25;
                                    rb[i][11] = rb[i][4] + 20;
                                }
                            }
                        }
                        //shot by player
                        if (rb[i][3] < playerShot[3]
                                && rb[i][3] + 50 > playerShot[3]
                                && rb[i][4] < playerShot[4]
                                && rb[i][4] + 40 > playerShot[4]
                                && playerShot[0] == 1
                                && playerShot[1] == STAGE) {
                            switch(playerShot[5]){
                                case 0:
                                    rb[i][2]=rb[i][2]-1;
                                    break;
                                case 1:
                                    rb[i][2]=rb[i][2]-2;
                                    break;
                                case 2:
                                    rb[i][2]=rb[i][2]-3;
                            }
                            playerShot[0] = 0;
                        }
                        if (rb[i][2] <= 0) {
                            rb[i][0] = 0;
                            score+=1000;
                        }
                    }
                }
            }

            //Robot's bullets

            for (int i = 0; i <= 99 - 1; i++) {
                if (rb[i][1] == STAGE) {
                    g.setColor(Color.black);
                    g.fillRect(rb[i][10] - 10, rb[i][11] - 2, 20, 4);
                    checkSecurityGuardBulletSurroundings();
                }
                if (rb[i][8] == 1) {
                    if (rb[i][9] == 0) {
                        rb[i][10] -= 5;
                    }
                    if (rb[i][9] == 1) {
                        rb[i][10] += 5;
                    }
                }
                if (rb[i][10] < 0 || rb[i][10] > 500) {
                    rb[i][8] = 0;
                    rb[i][10] = -10;
                    rb[i][11] = -10;
                }
                if (rb[i][10] > playerx
                        && rb[i][10] < playerx + 25
                        && playery + 10 > rb[i][4]
                        && playery + 30 < rb[i][4] + 40) {
                    LIVES-=2;
                    playerRespawn();
                    rb[i][8] = 0;
                    rb[i][10] = -10;
                    rb[i][11] = -10;
                }
            }
            //equipment

            for (int i = 0; i <= wpa.length - 1; i++) {
                if (wpa[i][0] == 1) {
                    if (wpa[i][1] == STAGE) {
                        switch (wpa[i][4]) {
                            case 0:
                                equipment = gun.getImage();
                                g.drawImage(equipment, wpa[i][2], wpa[i][3], this);
                                break;
                            case 1:
                                equipment = shotgun.getImage();
                                g.drawImage(equipment, wpa[i][2], wpa[i][3], this);
                                break;
                            case 2:
                                equipment = rpg.getImage();
                                g.drawImage(equipment, wpa[i][2], wpa[i][3], this);
                                break;
                        }
                        
                        if (wpa[i][2] > playerx
                                && wpa[i][2] + 15 < playerx + 25
                                && wpa[i][3] > playery
                                && wpa[i][3] + 10 < playery + 40) {
                            switch (wpa[i][4]) {
                                case 0:
                                    peq[0] += wpa[i][5];
                                    wpa[i][0] = 0;
                                    break;
                                case 1:
                                    peq[1] += wpa[i][5];
                                    wpa[i][0] = 0;
                                    break;
                                case 2:
                                    peq[2] += wpa[i][5];
                                    wpa[i][0] = 0;
                            }
                        }
                    }
                }
            }
            //SWITCHING WEAPONS
            if(firstPlace){
                selectedWeapon=0;
            }else if(secondPlace){
                selectedWeapon=1;
            }else if(thirdPlace){
                selectedWeapon=2;
            }
            
            /*if(STAGE==0){
                shooting=false;
            }*/
            //shooting
            if (playerShot[0] == 0) {
                if (peq[selectedWeapon] >= 1) {
                    if (shooting == true) {
                        peq[selectedWeapon]--;
                        //System.out.println("shooting");
                        playerShot[0] = 1;
                        playerShot[1] = STAGE;
                        if (facingRight == true) {
                            playerShot[2] = 1;
                        } else {
                            playerShot[2] = 0;
                        }
                        playerShot[5] = selectedWeapon;
                        playerShot[3] = playerx + 12;
                        playerShot[4] = playery + 20;
                    }
                }
            } else if (playerShot[0] == 1) {
                shooting = false;
                checkPlayerBulletSurroundings();
                if (playerShot[1] == STAGE) {
                    if (playerShot[2] == 0) {
                        playerShot[3] -= 5;
                    } else if (playerShot[2] == 1) {
                        playerShot[3] += 5;
                    }
                    switch (playerShot[5]) {
                        case 0:
                            g.setColor(Color.yellow);
                            g.fillRect(playerShot[3] - 10, playerShot[4] - 1, 20, 2);
                            break;
                        case 1:
                            g.setColor(Color.yellow);
                            g.fillRect(playerShot[3] - 10, playerShot[4] - 2, 20, 1);
                            g.fillRect(playerShot[3] - 10, playerShot[4] , 20, 1);
                            g.fillRect(playerShot[3] - 10, playerShot[4] + 2, 20, 1);
                            break;
                        case 2:
                            g.setColor(Color.white);
                            g.fillRect(playerShot[3] - 10, playerShot[4] - 3, 20, 6);
                            break;
                    }
                }
            }
            if (playerShot[3] < 0 || playerShot[3] > 500) {
                playerShot[0] = 0;
            }
            //player- generator
            if (playerx+25>=350&&STAGE==15&&keys==8){
                LIVES=-2;
                score+=(300-seconds);
            }
            
            //System.out.println(playerShot[0] + " " + playerShot[1] + " " + playerShot[2] + " " + playerShot[3] + " " + playerShot[4] + " " + playerShot[5]);


            //build checks
            g.setColor(Color.white);
            g.fillRect(0, 0, 120, 18);
            g.setColor(Color.black);
            g.fillRect(1, 1, 118, 16);
            g.setColor(Color.white);
            g.drawString("Stage: " + STAGE, 2, 12);
            g.drawString("lives: " + LIVES, 60, 12);
            
            g.setColor(Color.white);
            g.fillRect(380, 0, 120, 18);
            g.setColor(Color.black);
            g.fillRect(381, 1, 118, 16);
            g.setColor(Color.white);
            g.drawString("Score: "+score, 2+380, 12);
            
            g.setColor(Color.white);
            g.fillRect(380, 282, 120, 18);
            g.setColor(Color.black);
            g.fillRect(381, 283, 118, 16);
            g.setColor(Color.white);
            
            g.drawString("Keys: "+keys, 2+380, 12+282);
            
            
            if (STAGE == 0) {
                g2d.drawImage(imageBed, 3 * 25, 13 * 20, this); 
            }
            if (STAGE == 8) {
                g2d.drawImage(imageDoor, 200, 180, this);
            }
            if (STAGE == 15) {
                if(keys<8){
                    g2d.drawImage(imageDoor, 350, 180, this);
                }else{
                    g2d.drawImage(imageGenerator, 350, 180, this);
                }
            }
            g2d.drawImage(player, playerx, playery, this);

            g.setColor(Color.white);
            g.fillRect(0, 280, 120, 18);
            g.setColor(Color.black);
            g.fillRect(1, 281, 118, 16);
            
            g.setColor(Color.white);
            g.drawString("" + peq[0], 2, 292);
            equipment=gun.getImage();
            g.setColor(Color.white);
            g.fillRect(16,280,23,18);
            g2d.drawImage(equipment,15,280,this);
            
            g.setColor(Color.white);
            g.drawString("" + peq[1], 40, 292);
            equipment=shotgun.getImage();
            g.setColor(Color.white);
            g.fillRect(54,280,23,18);
            g2d.drawImage(equipment,53,280,this);
            
            g.setColor(Color.white);
            equipment=rpg.getImage();
            g.setColor(Color.white);
            g.fillRect(94,280,23,18);
            g2d.drawImage(equipment,93,280,this);
            g.drawString("" + peq[2], 78, 292);
            
            //displaying selected weapon
            switch(selectedWeapon){
                case 0:
                    g.setColor(Color.red);
                    g.drawRect(0,280, 39, 18);
                    break;
                case 1:
                    g.setColor(Color.red);
                    g.drawRect(40,280, 37, 18);
                    break;
                case 2:
                    g.setColor(Color.red);
                    g.drawRect(78,280, 39, 18);
                    break;
            }

            //ppos test
            //g.drawString("" + playerx, 100, 100);
            //g.drawString("" + playery, 100, 200);
            
            if(showHelp==true){
                g.setColor(Color.gray);
                g.fillRect(150, 100, 200, 100);
                g2d.drawImage(help,150,100,this);
            }
            

            if (showMap == true) {
                g.setColor(Color.gray);
                g.fillRect(150, 100, 200, 100);
                g.setColor(Color.white);
                g.fillRect(160, 110, 180, 80);
                g.setColor(Color.red);
                switch (STAGE) {
                    case 0:
                        g.fillRect(160, 110 + 20 + 20 + 20, 45, 20);
                        break;
                    case 1:
                        g.fillRect(160 + 45, 110 + 20 + 20 + 20, 45, 20);
                        break;
                    case 2:
                        g.fillRect(160 + 45 + 45, 110 + 20 + 20 + 20, 45, 20);
                        break;
                    case 3:
                        g.fillRect(160 + 45 + 45 + 45, 110 + 20 + 20 + 20, 45, 20);
                        break;
                    case 4:
                        g.fillRect(160 + 45 + 45 + 45, 110 + 20 + 20, 45, 20);
                        break;
                    case 5:
                        g.fillRect(160 + 45 + 45 + 45, 110 + 20, 45, 20);
                        break;
                    case 6:
                        g.fillRect(160 + 45 + 45 + 45, 110, 45, 20);
                        break;
                    case 7:
                        g.fillRect(160 + 45 + 45, 110, 45, 20);
                        break;
                    case 8:
                        g.fillRect(160 + 45, 110, 45, 20);
                        break;
                    case 9:
                        g.fillRect(160, 110, 45, 20);
                        break;
                    case 10:
                        g.fillRect(160, 110 + 20, 45, 20);
                        break;
                    case 11:
                        g.fillRect(160, 110 + 20 + 20, 45, 20);
                        break;
                    case 12:
                        g.fillRect(160 + 45, 110 + 20 + 20, 45, 20);
                        break;
                    case 13:
                        g.fillRect(160 + 45, 110 + 20, 45, 20);
                        break;
                    case 14:
                        g.fillRect(160 + 45 + 45 , 110 + 20+ 20, 45, 20);
                        break;
                    case 15:
                        g.fillRect(160 + 45 + 45, 110 + 20, 45, 20);
                        break;
                }

            }

            Toolkit.getDefaultToolkit().sync();
            g.dispose();
            g2d.dispose();
        } else if (LIVES == 0) {
            g.setColor(Color.black);
            g.fillRect(0, 0, 500, 300);
            g.setColor(Color.white);
            g.drawString("You failed to escape the laboratory.", 10, 15);
            g.drawString("Press space to try again.", 10, 30);
        } else if (LIVES == (-1)) {
            g.setColor(Color.black);
            g.fillRect(0, 0, 500, 300);
            g.setColor(Color.white);
            g.drawString("You wake up in a test chamber.", 10, 15);
            g.drawString("Noone's around.", 10, 30);
            g.drawString("There's a note lying next you.", 10, 45);
            g.drawString("It appears as though some doctor is trying to help you out.", 10, 60);
            g.drawString("''You have the strength to escape. Use any means necessary!''", 10, 75);
            g.drawString("''They know I've let you go and will do anything to stop you!''", 10, 90);
            g.drawString("It's time to escape the laboratory!", 10, 105);
            g.drawString("Press space to continue", 10, 120);
        } else if (LIVES == (-2)) {
            g.setColor(Color.black);
            g.fillRect(0, 0, 500, 300);
            g.setColor(Color.white);
            g.drawString("You turn off the generator.", 10, 15);
            g.drawString("Door opens.", 10, 30);
            g.drawString("Your freedom is now guaranteed.", 10, 45);
            g.drawString("It took you "+seconds+" seconds to win.", 10, 60);
            g.drawString("In that time you earned "+score+" score points.", 10, 75);
            g.drawString("CONGRATULATIONS!!!", 10, 90);
            g.drawString("Press space to start over...", 10, 120);
        }
        

    }
    /*
     * private void shootWeapon(Graphics g) { g.setColor(Color.red);
     * g.fillRect(mousex-5, mousey-5, 10, 10); }
     */
}
